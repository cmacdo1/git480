const mergedData = [...rows.map(obj => ({ ...obj, source: 'rows' })), ...autoRows.map(obj => ({ ...obj, source: 'autoRows' }))];

  // Split the mergedData into two separate datasets
  const rowsData = mergedData.filter(obj => obj.source === 'rows');
  const autoRowsData = mergedData.filter(obj => obj.source === 'autoRows');

  // const uniqueMonths = Array.from(new Set(mergedData.map((data) => data.date)));

  // const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June'];
  
{/* <DashboardBox gridArea="b" marginTop="3rem">
          <BoxHeader 
              title='Graph'
              subtitle=''
              sideText=''
          />
          <Box
            display="flex"
            justifyContent="center"
            alignItems="center"
            height="100%"
          >
          <ResponsiveContainer width='100%' height='100%'> 
              <LineChart
                data={mergedData}
                margin={{
                  top: 20,
                  right: 0,
                  left: -10,
                  bottom: 55,
                }}
              >
                <CartesianGrid vertical={false} stroke={palette.grey[800]} />
                <XAxis 
                  dataKey="date"
                  tickLine={false}
                  // ticks={months}
                  style={{ fontSize: "10px" }}
                  interval="preserveStartEnd" 
                />
                <YAxis
                  yAxisId="left"
                  orientation="left"
                  tickLine={false}
                  axisLine={false}
                  style={{ fontSize: "10px" }}
                />
                <YAxis
                  yAxisId="right"
                  orientation="right"
                  tickLine={false}
                  axisLine={false}
                  style={{ fontSize: "10px" }}
                />
                <Tooltip />
                <Line 
                  yAxisId="left"
                  type="monotone"
                  dataKey="remaining"
                  stroke={palette.primary.main} 
                  // isAnimationActive={false}
                  data={rowsData}
                />
                {/* <Line 
                  yAxisId="right"
                  type="monotone"
                  dataKey="remaining"
                  stroke={customPalette.tertiary[500]} 
                  // isAnimationActive={false}
                  data={autoRowsData}
                /> */}
              {/* </LineChart>
            </ResponsiveContainer>
            <ResponsiveContainer width='100%' height='100%'> 
              <LineChart
                data={mergedData}
                margin={{
                  top: 20,
                  right: 0,
                  left: -10,
                  bottom: 55,
                }}
              >
                <CartesianGrid vertical={false} stroke={palette.grey[800]} />
                <XAxis 
                  dataKey="date"
                  tickLine={false}
                  // ticks={months}
                  style={{ fontSize: "10px" }}
                  interval="preserveStartEnd" 
                />
                <YAxis
                  yAxisId="left"
                  orientation="left"
                  tickLine={false}
                  axisLine={false}
                  style={{ fontSize: "10px" }}
                />
                <YAxis
                  yAxisId="right"
                  orientation="right"
                  tickLine={false}
                  axisLine={false}
                  style={{ fontSize: "10px" }}
                />
                <Tooltip />
                {/* <Line 
                  yAxisId="left"
                  type="monotone"
                  dataKey="remaining"
                  stroke={palette.primary.main} 
                  // isAnimationActive={false}
                  data={rowsData}
                /> */}
                {/* <Line 
                  yAxisId="right"
                  type="monotone"
                  dataKey="remaining"
                  stroke={customPalette.tertiary[500]} 
                  // isAnimationActive={false}
                  data={autoRowsData}
                />
              </LineChart>
            </ResponsiveContainer>
          </Box>
        </DashboardBox> */}